plugins {
    alias(libs.plugins.rust.android.gradle)
    alias(libs.plugins.android.library)
    alias(libs.plugins.jetbrains.kotlin.android)
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.0'
    id 'signing'
}

android {
    namespace 'dev.convex.android'
    compileSdk 34

    ndkVersion = "27.0.11902837"

    defaultConfig {
        minSdk 26
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    publishing {
        multipleVariants {
            allVariants()
            withJavadocJar()
        }
    }
}

cargo {
    module = "../../rust"
    libname = "convexmobile"
    targets = ["arm64", "arm"]
}

tasks.whenTaskAdded { task ->
    if ((task.name == 'generateDebugUniFFIBindings' || task.name == 'generateReleaseUniFFIBindings')) {
        task.dependsOn 'cargoBuild'
    }
    if (task.name == 'compileDebugKotlin') {
        task.dependsOn 'generateDebugUniFFIBindings'
    } else if (task.name == 'compileReleaseKotlin') {
        task.dependsOn 'generateReleaseUniFFIBindings'
    }
}

tasks.register("generateUniFFIBinary", Exec) {
    workingDir "${project.projectDir}/../../rust"
    commandLine 'cargo', 'build'
}

android.libraryVariants.all { variant ->
    def t = tasks.register("generate${variant.name.capitalize()}UniFFIBindings", Exec) {
        workingDir "${project.projectDir}/../../rust"
        commandLine './target/debug/uniffi-bindgen', 'generate', '--library', "${project.layout.buildDirectory.asFile.get().path}/rustJniLibs/android/arm64-v8a/libconvexmobile.so", '--language', 'kotlin', '--out-dir', "${project.layout.buildDirectory.asFile.get().path}/generated/source/uniffi/${variant.name}/java"
        dependsOn 'generateUniFFIBinary'
    }
    def sourceSet = variant.sourceSets.find { it.name == variant.name }
    sourceSet.java.srcDir new File(project.layout.buildDirectory.asFile.get().path, "generated/source/uniffi/${variant.name}/java")
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = 'dev.convex'
            artifactId = 'android-convexmobile'
            version = '0.4.0'
            pom {
                name = 'Convex for Android'
                description = 'Android client library for building apps with convex.dev'
                url = 'https://www.convex.dev/'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        name = 'Christian Wyglendowski'
                        email = 'christian@convex.dev'
                        organization = 'Convex, Inc.'
                        organizationUrl = 'https://www.convex.dev/'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/get-convex/convex-mobile.git'
                    developerConnection = 'scm:git:ssh://git@github.com:get-convex/convex-mobile.git'
                    url = 'https://www.convex.dev/'
                }
            }

            afterEvaluate {
                from components.release
            }

            repositories {
                maven {
                    name = 'zipRepo'
                    url = "${project.layout.buildDirectory.asFile.get().path}/repo"
                }
            }
        }
    }

}

signing {
    sign publishing.publications
}

dependencies {
    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.material
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    // Have to use string dependency reference for JNA due to https://github.com/gradle/gradle/issues/21267
    implementation "net.java.dev.jna:jna:5.14.0@aar"
    implementation libs.kotlinx.serialization.json
    testImplementation libs.kotlinx.coroutines.test
    androidTestImplementation libs.kotlinx.coroutines.test
    testImplementation(libs.strikt.core)
}


task convexLocalBackend {
    doFirst {
        println("Launching Convex backend")
        ext.process = new ProcessBuilder()
                .directory(projectDir)
                .command("convex-local-backend")
                .start()
    }
}

task stopConvexLocalBackend {
    doFirst {
        println("Stopping Convex backend")
        if (tasks.convexLocalBackend.process != null) {
            tasks.convexLocalBackend.process.destroy()
        }
    }
}