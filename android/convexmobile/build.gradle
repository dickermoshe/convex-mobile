plugins {
    alias(libs.plugins.rust.android.gradle)
    alias(libs.plugins.android.library)
    alias(libs.plugins.jetbrains.kotlin.android)
    id 'org.jetbrains.kotlin.plugin.serialization' version '2.0.0'
}

android {
    namespace 'dev.convex.android'
    compileSdk 34

    ndkVersion = "27.0.11902837"

    defaultConfig {
        minSdk 26
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    publishing {
        multipleVariants {
            allVariants()
            withJavadocJar()
        }
    }
}

cargo {
    module = "../../rust"
    libname = "convexmobile"
    targets = ["arm64"]
}

tasks.whenTaskAdded { task ->
    if ((task.name == 'generateDebugUniFFIBindings' || task.name == 'generateReleaseUniFFIBindings')) {
        task.dependsOn 'cargoBuild'
    }
    if (task.name == 'compileDebugKotlin') {
        task.dependsOn 'generateDebugUniFFIBindings'
    } else if (task.name == 'compileReleaseKotlin') {
        task.dependsOn 'generateReleaseUniFFIBindings'
    }
}

tasks.register("generateUniFFIBinary", Exec) {
    workingDir "${project.projectDir}/../../rust"
    commandLine 'cargo', 'build'
}

android.libraryVariants.all { variant ->
    def t = tasks.register("generate${variant.name.capitalize()}UniFFIBindings", Exec) {
        workingDir "${project.projectDir}/../../rust"
        commandLine './target/debug/uniffi-bindgen', 'generate', '--library', "${project.layout.buildDirectory.asFile.get().path}/rustJniLibs/android/arm64-v8a/libconvexmobile.so", '--language', 'kotlin', '--out-dir', "${project.layout.buildDirectory.asFile.get().path}/generated/source/uniffi/${variant.name}/java"
        dependsOn 'generateUniFFIBinary'
    }
    def sourceSet = variant.sourceSets.find { it.name == variant.name }
    sourceSet.java.srcDir new File(project.layout.buildDirectory.asFile.get().path, "generated/source/uniffi/${variant.name}/java")
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = 'dev.convex'
            artifactId = 'android-convexmobile'
            version = '0.1.0'

            afterEvaluate {
                from components.release
            }
        }
    }
}

dependencies {

    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.material
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    // Have to use string dependency reference for JNA due to https://github.com/gradle/gradle/issues/21267
    implementation "net.java.dev.jna:jna:5.14.0@aar"
    implementation libs.kotlinx.serialization.json
}